@page "/email5"
@using System.Threading.Tasks;
@using BlazorApp11.Data; 

@inject EmailService MyEmailSender
<!--  injects the service; service must also be registered in Startup.cs like this: services.AddSingleton<EmailSender>();  -->

<h3>Email 5 - Code to call a Service to send the email</h3>
<h1>Includes user notification of success or failure</h1>

<EditForm Model="@newEmail" OnValidSubmit="@ExecuteEmail">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText id="Name" placeholder="Your Name" @bind-Value="newEmail.Name" :null /><br /><br />
    <InputText id="Email" placeholder="Your Email" @bind-Value="newEmail.Email" :null /><br /><br />
    <InputText id="Subject" placeholder="Subject" @bind-Value="newEmail.Subject" :null /><br /><br />
    <InputText id="Message" placeholder="Message" @bind-Value="newEmail.Message" :null /><br /><br />
    <button type="submit" class="btn btn-primary">Send Email</button>
</EditForm>

@if (@MailResponse == null)  {}
else {
        @if (@MailResponse == "EMail Sent!")
            {<div class="alert alert-success" role="alert">@MailResponse</div>}
        else
            {<div class="alert alert-failure" role="alert">@MailResponse</div>}
}

@code 
{
public EmailModel newEmail = new EmailModel();

private string MailResponse;

public async Task ExecuteEmail() 
    {
    MailResponse = await MyEmailSender.ServiceSendEmail(newEmail.Email, newEmail.Subject, newEmail.Message);
    newEmail = new EmailModel();  // clear the form 
    StateHasChanged();  // alert user if email succeeded or failed
    await Task.Delay(3000);   // keep alert on screen fo 3 seconds
    MailResponse = null;  // clear the mail response
    }
}
